% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Db.R
\name{createDbGrid}
\alias{createDbGrid}
\title{Create an empty DbGrid}
\usage{
createDbGrid(coords = NULL, nx = NULL, dx = NULL, x0 = NULL, coordnames = NULL)
}
\arguments{
\item{coords}{A list containing the coordinates of the grid in each dimension.}

\item{nx}{A vector containing the size of the grid in each dimension.}

\item{dx}{A number or a vector specifying the step size of the grid in each dimension. Default = \code{NULL} means that \code{dx=1/(nx-1)}.}

\item{x0}{A vector specifying the origin (i.e. lower-left corner) of the grid. Default = \code{NULL} means that \code{x0=rep(0, length(nx))}.}

\item{coordnames}{A vector specifying names for the grid coordinates. Default = \code{NULL} means that the i-th coordinate will be named xi.}
}
\value{
A DbGrid object.
}
\description{
Function to create an empty \pkg{gstlearn} DbGrid object.
}
\details{
There are two ways of creating a DbGrid:
\itemize{
  \item Either by specifying the argument \code{coords} and optionally the argument \code{coordnames}. Then, the dimension of the grid is set by the number of vectors of coordinates given in \code{coords} and the other arguments are ignored.
  \item Or by specifying the argument \code{nx} and optionally the arguments \code{dx, x0, coordnames}. Then, the dimension of the grid is set by the length of \code{nx}, and the other arguments are ignored.
}
}
\examples{
library(minigst)

# Define grid points
ngrid=100
xseq=seq(from=0,to=1,length.out=ngrid)
yseq=seq(from=0,to=1,length.out=ngrid)

# Create DbGrid
dbG=createDbGrid(coords=list(xseq,yseq),coordnames=c("xcoord", "ycoord"))
dbG

# Alternative way of creating the same DbGrid
dbG=createDbGrid(nx=c(ngrid,ngrid),dx=c(1/(ngrid-1),1/(ngrid-1)),x0=c(0,0))
dbG


}
